
1)Что такое состояние гонки?
Это конкуренция за выполнение операции первым (особо опасны гонки за данными, т.к приводят к неопределенному поведению, добавлению элемента в очередь - +-безвредная гонка)
2) Как используют мьютексы и условные переменные?
Mutex – средство для предоставления эксклюзивного доступа к данным для одного потока.
Std::mutex -> lock, unlock -> RAII 
Условная переменная — это, по существу, очередь потоков. Они используются в сочетании с мьютексами для лучшего управления синхронизацией потоков. Условная переменная всегда ассоциируется с каким-то мьютексом. Ее назначение — освободить мьютекс до тех пор, пока не начнет выполняться определенное условие.
Mutex – mutual exclusion : lock/unlock (RAII)
Std::lock_guard() (устаревшее)
Std::unique_lock
Std::scoped_lock

Std::mutex – Предоставляет эксклюзивный доступ
Std::shared_mutex: + shared  lock/unlock
Std::recursive_mutex
Hirochical mutex
Timed_mutex

Условные переменные (Condition_variable) – для событий: motify/wait : событийно-ориентированное программирование

3)	На что влияет выбор гранулярности блокировки?
Гранулярность блокировки оказывает влияние на одновременный конкурентный доступ. В общем, чем выше уровень гранулярности, тем больше сокращается возможность совместного доступа к данным. Для решения проблемы можем сделать мелкогранную блокировку через несколько мьютексов

4)	Когда возникает взаимоблокировка и как ее предотвратить?
Взаимоблокировка процессов может происходить, когда несколько процессов борются за один ресурс
Способы решения проблемы:
•	Не делать вложенных блокировок
•	Использовать мьютексы с приоритетами
•	Гарантировать одинаковый порядок
•	Использовать std::boost lock
 

5)	Что есть атомарная операция и атомарный тип данных?
Атомарные типы данных и атомарные операции + модель памяти
Данные состоят из объектов –> ячейка памяти  
Std::atomic < T >:  
Load – чтение
Store - запись
Exchange – обмен
Операции транзакционные(упорядоченные): 
-	Есть внутренняя блокировка
-	Нет внутренней блокировки (! крутая штука)
Атомарные типы данных
Std::atomic <int> 
Syd::atomic <bool>


