1)	Какие концепции лежат в основе стандартной библиотеки?	
•	Переносимость – сохраняется поведение кода
•	Баланс между компактностью и эффективностью (под компактностью имеется в виду сложность кода)
•	Компоненты стандартной библиотеки выступают в роли связующего звена между различными модулями или частями программы 

2)	Зачем в проектах используются системы контроля версий?
•	Часто разработчики трудятся в команде над одним проектом, а значит, сразу несколько человек могут изменять один файл одновременно. Чтобы избежать путаницы, в таких случаях используют систему контроля версий, которая позволяет хранить историю изменений проекта и при необходимости помогает вернуться к предыдущей версии

3)	Из каких основных действий состоит взаимодействие с Git
•	Commited (фиксируем файл)
•	Modified (изменение файла)
•	Staged (пометка файла)

4)	Когда стоит создавать отдельные ветки для разработки?
Можно привести много примеров, рассмотрим следующий:
Есть продукт в бета-версии, пользователь находит не работающий элемент и сообщает об этом в службу поддержки, служба поддержки переправляет проблему разработчику и в целях решения проблемы он создает отдельную ветку и исправляет ошибку в ней, с помощью отдельной ветки он не может навредить программе и только лишь после успешного исправления ошибки разработчик использует функцию merge, чтобы “перекачать” правильное решение в основную ветку

5)	Какие основные элементы содержатся в библиотеке chrono?
Chrono – библиотека для работы со временем
•	интервалы времени – duration(n тактов заданной продолжительности);
•	моменты времени – time_point(комбинация интервала и эпохи);
•	таймеры – clock(определяет эпоху и продолжительность такта).
•	Std::ratio – тип для работы с дробями
