1)	Почему класс std::string имеет много перегруженных функций-членов?
Стоит сказать, что std::string – шаблон класса

1.	Строки работают через итераторы (если не находим то возвращает end)
2.	Либо через индексы  (если не находим то возвращает -1) – npos(см.find)
3.	C – строки, char
4.	Std::String  

Класс Бога, противоречит концепции ООП

2)	Как осуществляется интернационализация и локализация программы?
В STD полного комплекта для решения задач нет, поэтому используем boost, чтобы работать с текстом и буквами.
Так же скажем, что локаль – это объект локального контекста, локаль мы передаем потокам и они корректируют ввод и вывод по ней (C++: std::locale (“ ”); ->  передаем это потоку)
Язык_зона.код[@модификатор]
Единицы измерения
Дата\время                                std::locale -> состоит из facet – ов (компонент locale)
Формат чисел 

Facet – это объекты для учета отдельных аспектов: время, дата, числа и тд

3)	Чем отличаются многобайтовые кодировки от широких кодировок?
Многобайтовые кодировки (multibyte) (1)
Широкие кодировки (2)
(1)	Компактнее (экономия памяти): 1, 2, 3 или 4 байта
(2)	Производительнее(для программ), char32_t – 4 байта

4)	Какие компоненты входят в стандарт кодирования символов Unicode?
Unicode – стандарт кодирования символов:
•	Универсальный набор символов (UCS)
•	Семейство кодировок (UTF)
Используем ASCII

7F -> 1 октет (7 бит)
7FF -> 2 октет (11 бит)
FFFF -> 3 октет (16 бит)
1000-10FFFF -> 4 октет (21 бит)


5)	Для решения каких задач удобно использовать регулярные выражения?
Для чего нужны регулярные выражения?
Регулярные выражения используются для нахождения фрагментов, удовлетворяющих некоторую шаблону – паттерну
<regex>:
•	Regex_match – полное совпадение
•	Regex_search – поиск кусков
•	Regex_replace – поиск и замена
•	Regex_iterator – ходит по кускам, который ходит по тем паттернам, которые мы ищем
•	Regex_token_iterator  - ходит по кускам тех паттернов, которые мы не ищем 
